// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

model User {
  id            Int      @id @default(autoincrement())
  telegramId    BigInt   @unique
  phoneNumber   String?  @unique
  username      String?
  firstName     String?
  lastName      String?
  authDate      Int?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  refreshToken  String?
  isAdmin       Boolean  @default(false)
  
  // Relations
  orders        Order[]
  reviews       Review[]
}

model ServiceCategory {
  id          Int       @id @default(autoincrement())
  name        String
  icon        String
  description String
  color       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  services    Service[]
}

model Specialist {
  id          Int       @id @default(autoincrement())
  name        String
  avatar      String?
  rating      Float     @default(0)
  reviewCount Int       @default(0)
  experience  String
  description String
  categories  String[]  // JSON array
  hourlyRate  Float
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  services    Service[]
  orders      Order[]
  reviews     Review[]
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  duration    Int       // в минутах
  categoryId  Int
  rating      Float     @default(0)
  reviewCount Int       @default(0)
  isPopular   Boolean   @default(false)
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  specialists Specialist[]
  orders      Order[]
  reviews     Review[]
}

model OrderStatus {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  color       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  orders      Order[]
}

model Order {
  id             Int         @id @default(autoincrement())
  userId         Int
  serviceId      Int
  specialistId   Int?
  statusId       Int
  totalPrice     Float
  scheduledDate  DateTime?
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Relations
  user           User        @relation(fields: [userId], references: [id])
  service        Service     @relation(fields: [serviceId], references: [id])
  specialist     Specialist? @relation(fields: [specialistId], references: [id])
  status         OrderStatus @relation(fields: [statusId], references: [id])
}

model Review {
  id           Int        @id @default(autoincrement())
  userId       Int
  serviceId    Int
  specialistId Int?
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relations
  user         User       @relation(fields: [userId], references: [id])
  service      Service    @relation(fields: [serviceId], references: [id])
  specialist   Specialist? @relation(fields: [specialistId], references: [id])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
