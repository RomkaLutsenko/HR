const TelegramBot = require('node-telegram-bot-api');
const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL,
    },
  },
});
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

// ===== –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" =====
const sendAppLink = async (chatId) => {
  const appUrl = process.env.APP_URL;

  await bot.sendMessage(chatId, 'üöÄ –û—Ç–ª–∏—á–Ω–æ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å ServiceHub:', {
    reply_markup: {
      inline_keyboard: [[
        {
          text: 'üíº –û—Ç–∫—Ä—ã—Ç—å ServiceHub',
          web_app: { url: appUrl },
        },
      ]],
    },
  });
};

// ===== /start =====
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;

  if (!telegramId) {
    console.error("–û—à–∏–±–∫–∞: msg.from –∏–ª–∏ msg.from.id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", { msg });
    return bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }

  try {
    let user = await prisma.user.findUnique({ where: { telegramId } });

    if (!user) {
      user = await prisma.user.create({ data: { telegramId } });
    }

    if (!user.phoneNumber) {
      return bot.sendMessage(chatId, 'üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ ServiceHub:', {
        reply_markup: {
          keyboard: [[{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }]],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      });
    }

    await sendAppLink(chatId);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /start:', error);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ =====
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;

  if (!msg.contact || !msg.contact.phone_number) return;

  try {
    const contact = msg.contact;

    const user = await prisma.user.findUnique({ where: { telegramId } });

    if (!user) {
      return bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.');
    }

    if (!user.phoneNumber) {
      await prisma.user.update({
        where: { telegramId },
        data: {
          phoneNumber: contact.phone_number,
          firstName: contact.first_name || null,
          lastName: contact.last_name || null,
        },
      });
    }

    await bot.sendMessage(chatId, `‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${contact.phone_number}`);
    await sendAppLink(chatId);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});
