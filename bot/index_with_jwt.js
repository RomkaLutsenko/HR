const TelegramBot = require('node-telegram-bot-api');
const { PrismaClient } = require('./generated/prisma');
const { encode } = require('next-auth/jwt');
require('dotenv').config();

const prisma = new PrismaClient();
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

const SEVEN_DAYS = 7 * 24 * 60 * 60; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è encode, –Ω–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;

  try {
    let user = await prisma.user.findUnique({ where: { telegramId } });

    if (!user) {
      user = await prisma.user.create({ data: { telegramId } });
    }

    if (!user.phoneNumber) {
      return bot.sendMessage(chatId, 'üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –≤—Ö–æ–¥–∞:', {
        reply_markup: {
          keyboard: [[{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }]],
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      });
    }

    const now = new Date();
    let token = user.jwtToken;
    if (!token || !user.jwtTokenExpiresAt || user.jwtTokenExpiresAt < now) {
      token = await encode({
        secret: process.env.JWT_SECRET,
        token: {
          id: user.id,
          telegramId: user.telegramId,
        },
        maxAge: SEVEN_DAYS,
      });

      await prisma.user.update({
        where: { id: user.id },
        data: {
          jwtToken: token,
          jwtTokenExpiresAt: new Date(now.getTime() + SEVEN_DAYS * 1000),
        },
      });
    }

    const appUrlWithToken = `${process.env.APP_URL}`;

    await bot.sendMessage(chatId, 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: appUrlWithToken },
          },
        ]],
      },
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /start:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  if (!msg.contact) return;

  try {
    const contact = msg.contact;
    const telegramId = msg.from.id;

    if (!contact.phone_number) {
      return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
    }

    console.log('üì≤ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç:', contact);

    let user = await prisma.user.upsert({
      where: { telegramId },
      update: {
        phoneNumber: contact.phone_number,
        firstName: contact.first_name || null,
        lastName: contact.last_name || null,
      },
      create: {
        telegramId,
        phoneNumber: contact.phone_number,
        firstName: contact.first_name || null,
        lastName: contact.last_name || null,
      },
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î:', user);

    const now = new Date();
    let token = user.jwtToken;
    if (!token || !user.jwtTokenExpiresAt || user.jwtTokenExpiresAt < now) {
      token = await encode({
        secret: process.env.JWT_SECRET,
        token: {
          id: user.id,
          telegramId: user.telegramId,
        },
        maxAge: SEVEN_DAYS,
      });

      await prisma.user.update({
        where: { id: user.id },
        data: {
          jwtToken: token,
          jwtTokenExpiresAt: new Date(now.getTime() + SEVEN_DAYS * 1000),
        },
      });
    }

    const appUrlWithToken = `${process.env.APP_URL}`;

    await bot.sendMessage(chatId, '‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: appUrlWithToken }
          },
        ]],
      },
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});